name: All tests + linter

on:
  - push
  - pull_request

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    environment: ci_tests_env
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: |
          make install
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        env:
          LOGURU_LEVEL: ${{ vars.LOGURU_LEVEL }}
          DB_FILE: ${{ vars.DB_FILE }}
          USER_PREFERENCES__DEFAULT_CINEMA_VENUE: ${{ vars.USER_PREFERENCES__DEFAULT_CINEMA_VENUE }}
          USER_PREFERENCES__DEFAULT_DAY: ${{ vars.USER_PREFERENCES__DEFAULT_DAY }}
          USER_PREFERENCES__TMDB_ACCESS_TOKEN: ${{ secrets.USER_PREFERENCES__TMDB_ACCESS_TOKEN }}
          CINEMA_CITY_SETTINGS__REPERTOIRE_URL: ${{ vars.CINEMA_CITY_SETTINGS__REPERTOIRE_URL }}
          CINEMA_CITY_SETTINGS__VENUES_LIST_URL: ${{ vars.CINEMA_CITY_SETTINGS__VENUES_LIST_URL }}
        run: make tests
      #----------------------------------------------
      #              update coverage
      #----------------------------------------------
      - name: Upload coverage to Coveralls
        uses: AndreMiras/coveralls-python-action@v20201129
        with:
          parallel: true
      #----------------------------------------------
      #              lint code
      #----------------------------------------------
      - name: Run linter
        run: make lint
  coveralls_finish:
    needs: test-and-lint
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: AndreMiras/coveralls-python-action@v20201129
        with:
          parallel-finished: true
